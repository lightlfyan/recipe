#!/usr/bin/env python3.7
# coding:utf-8

import cv2
import time
import subprocess


class Adb(object):
    def screenshots(self, serialNumber=None):
        self.command('shell screencap -p /sdcard/screencap.png', serialNumber)
        self.command('pull /sdcard/screencap.png', serialNumber)

    def click(self, point, serialNumber=None):
        return self.command('shell input tap '+str(point[0])+' '+str(point[1]), serialNumber)

    def command(self, cmd, serialNumber=None):
        cmdstr = 'adb '
        if serialNumber:
            cmdstr = cmdstr + ' -s '+ serialNumber + ' '

        try:
            return [0, subprocess.check_output(cmdstr+cmd, shell=True)]
        except Exception as e:
            print(e)
            return [1, None]


android = Adb()


def draw(img, pt, w, h):
    cv2.rectangle(img, pt, (pt[0] + w, pt[1] + h), (7,249,151), 2) 
    cv2.imshow('Detected', img)
    cv2.waitKey(0)
    cv2.destroyAllWindows()


def find_image(img, template_path):
    img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    template   = cv2.imread(template_path, 0)
    w, h = template.shape[::-1]
    result = cv2.matchTemplate(img_gray, template, cv2.TM_SQDIFF)
    _min_val,_max_val,min_loc, _max_loc = cv2.minMaxLoc(result)
    # draw(img, min_loc, w, h)
    return (int(min_loc[0]+w/2), int(min_loc[1]+h/2))


def click(button_img, need_refresh=True):
    if need_refresh:
        android.screenshots()
    img_rgb = cv2.imread("screencap.png")
    loc = find_image(img_rgb, button_img)
    android.click(loc)


if __name__ == '__main__':
    android.screenshots()

    for i in range(1, 6):
        print(f'click button {i}')
        click(f'imgs/{i}.png', False)
        time.sleep(1)
